{"version":3,"sources":["ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts"],"names":["MatSelectSearchClearDirective","Directive","args","selector","MatSelectSearchComponent","matSelect","changeDetectorRef","matOption","this","placeholderLabel","noEntriesFoundLabel","clearSearchInput","searching","disableInitialFocus","onChange","_","onTouched","overlayClassSet","change","EventEmitter","_onDestroy","Subject","Object","defineProperty","prototype","_value","ngOnInit","_this","panelClass","Array","isArray","push","disabled","_getHostElement","classList","add","openedChange","pipe","delay","takeUntil","subscribe","opened","getWidth","_focus","_reset","take","_options","options","changes","keyManager","_keyManager","panelOpen","setTimeout","setFirstItemActive","_noEntriesFound","remove","detectChanges","initMultipleHandling","ngOnDestroy","next","complete","ngAfterViewInit","setOverlayClass","markForCheck","_handleKeydown","event","key","length","keyCode","A","Z","ZERO","NINE","SPACE","stopPropagation","writeValue","value","emit","onInputChange","initMultiSelectedValues","onBlur","registerOnChange","fn","registerOnTouched","searchSelectInput","panel","nativeElement","scrollTop","focus","overlayClasses","overlayDir","attach","overlayElement","element","parentElement","contains","forEach","overlayClass","valueChange","values","multiple","restoreSelectedValues_1","previousSelectedValues","optionValues_1","map","option","previousValue","indexOf","_onChange","innerSelectSearch","panelElement","style","width","clientWidth","filter","selected","Component","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","changeDetection","ChangeDetectionStrategy","OnPush","MatSelect","decorators","type","Inject","ChangeDetectorRef","MatOption","Optional","Input","ViewChild","read","ElementRef","ContentChild","HostBinding","NgxMatSelectSearchModule","NgModule","imports","CommonModule","MatButtonModule","MatIconModule","MatInputModule","MatProgressSpinnerModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, QueryList,\n  ViewChild,\n  ContentChild, Optional, HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatOption, MatSelect } from '@angular/material';\nimport {\n  A,\n  Z,\n  ZERO,\n  NINE,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport { Subject } from 'rxjs';\nimport {delay, take, takeUntil} from 'rxjs/operators';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: ['./mat-select-search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Whether to show the search-in-progress indicator */\n  @Input() searching = false;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', {read: ElementRef}) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', {read: ElementRef}) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective) clearIcon: MatSelectSearchClearDirective;\n\n  @HostBinding('class.mat-select-search-inside-mat-option')\n  get isInsideMatOption(): boolean {\n    return !!this.matOption;\n  }\n\n  /** Current search value */\n  get value(): string {\n    return this._value;\n  }\n  private _value: string;\n\n  onChange: Function = (_: any) => {};\n  onTouched: Function = (_: any) => {};\n\n  /** Reference to the MatSelect options */\n  public _options: QueryList<MatOption>;\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  /** Whether the backdrop class has been set */\n  private overlayClassSet = false;\n\n  /** Event that emits when the current value changes */\n  private change = new EventEmitter<string>();\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n              public changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MatOption) public matOption: MatOption = null) {\n\n\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        this.matSelect.panelClass.push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          // focus the search field when opening\n          this.getWidth();\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this._options = this.matSelect.options;\n        this._options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            const keyManager = this.matSelect._keyManager;\n            if (keyManager && this.matSelect.panelOpen) {\n\n              // avoid \"expression has been changed\" error\n              setTimeout(() => {\n                // set first item active and input width\n                keyManager.setFirstItemActive();\n                this.getWidth();\n\n                // set no entries found class on mat option\n                if (this.matOption) {\n                  if (this._noEntriesFound()) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                  } else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                  }\n                }\n              }, 1);\n\n            }\n          });\n      });\n\n    // detect changes when the input changes\n    this.change\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.changeDetectorRef.detectChanges();\n      });\n\n    this.initMultipleHandling();\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  ngAfterViewInit() {\n    this.setOverlayClass();\n\n    // update view when available options change\n    this.matSelect.openedChange\n      .pipe(\n        take(1),\n        takeUntil(this._onDestroy)\n      ).subscribe(() => {\n        this.matSelect.options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            this.changeDetectorRef.markForCheck();\n          });\n      });\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n  // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n  if ((event.key && event.key.length === 1) ||\n    (event.keyCode >= A && event.keyCode <= Z) ||\n    (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n    (event.keyCode === SPACE)) {\n      event.stopPropagation();\n    }\n  }\n\n\n  writeValue(value: string) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this._value = value;\n      this.change.emit(value);\n    }\n  }\n\n  onInputChange(value) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this.initMultiSelectedValues();\n      this._value = value;\n      this.onChange(value);\n      this.change.emit(value);\n    }\n  }\n\n  onBlur(value: string) {\n    this.writeValue(value);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: Function) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    this.searchSelectInput.nativeElement.value = '';\n    this.onInputChange('');\n    if (this.matOption && !focus) {\n      // remove no entries found class on mat option\n      this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n    }\n    if (focus) {\n      this._focus();\n    }\n  }\n\n  /**\n   * Sets the overlay class  to correct offsetY\n   * so that the selected option is at the position of the select box when opening\n   */\n  private setOverlayClass() {\n    if (this.overlayClassSet) {\n      return;\n    }\n    const overlayClasses: string[] = ['cdk-overlay-pane-select-search'];\n\n    if (!this.matOption) {\n      // add offset to panel if component is not placed inside mat-option\n      overlayClasses.push('cdk-overlay-pane-select-search-with-offset');\n    }\n\n    this.matSelect.overlayDir.attach\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        // note: this is hacky, but currently there is no better way to do this\n        let element: HTMLElement = this.searchSelectInput.nativeElement;\n        let overlayElement: HTMLElement;\n        while (element = element.parentElement) {\n          if (element.classList.contains('cdk-overlay-pane')) {\n            overlayElement = element;\n            break;\n          }\n        }\n        if (overlayElement) {\n          overlayClasses.forEach(overlayClass => {\n            overlayElement.classList.add(overlayClass);\n          });\n        }\n      });\n\n    this.overlayClassSet = true;\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.matSelect.valueChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        if (this.matSelect.multiple) {\n          let restoreSelectedValues = false;\n          if (this._value && this._value.length\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n\n          if (restoreSelectedValues) {\n            this.matSelect._onChange(values);\n          }\n\n          this.previousSelectedValues = values;\n        }\n      });\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  private getWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  /**\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\n   */\n  initMultiSelectedValues() {\n    if (this.matSelect.multiple && !this._value) {\n      this.previousSelectedValues = this.matSelect.options\n        .filter(option => option.selected)\n        .map(option => option.value);\n    }\n  }\n\n  /**\n   * Returns whether the \"no entries found\" message should be displayed\n   */\n  public _noEntriesFound(): boolean {\n    if (!this._options) {\n      return;\n    }\n    if (this.matOption) {\n      return this.noEntriesFoundLabel && this.value && this._options.length === 1;\n    } else {\n      return this.noEntriesFoundLabel && this.value && this._options.length === 0;\n    }\n  }\n\n}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport {MatButtonModule, MatInputModule, MatIconModule, MatProgressSpinnerModule} from '@angular/material';\nimport { CommonModule } from '@angular/common';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\nexport const MatSelectSearchVersion = '1.6.0';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n"]}