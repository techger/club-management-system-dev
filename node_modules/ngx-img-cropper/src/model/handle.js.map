{"version":3,"file":"handle.js","sourceRoot":"","sources":["../../../src/model/handle.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAgBrD,IAAA;IASE,gBAAY,CAAS,EAAE,CAAS,EAAE,MAAc,EAAE,QAAyB;+BAFjC,IAAI,eAAe,EAAE;QAG7D,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;KACjC;IAEM,wBAAO,GAAd,UAAe,KAAc;QAC3B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KACrB;IAEM,qBAAI,GAAX,UAAY,GAA6B;;KAExC;IAEM,wBAAO,GAAd,UAAe,IAAa;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;IAEM,8BAAa,GAApB,UAAqB,CAAS,EAAE,CAAS;QACvC,MAAM,CAAC,CACL,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACjD,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACjD,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACjD,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAClD,CAAC;KACH;IAED,sBAAW,4BAAQ;aAAnB;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;SACvB;;;OAAA;IAEM,4BAAW,GAAlB,UAAmB,CAAS,EAAE,CAAS;QACrC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;KACtB;iBAhEH;IAiEC,CAAA;AAhDD,kBAgDC","sourcesContent":["import { Point } from \"./point\";\r\nimport { CropperSettings } from \"../cropperSettings\";\r\n\r\nexport interface IHandle {\r\n  over: boolean;\r\n  drag: boolean;\r\n  position: Point;\r\n  setPosition(x: number, y: number): void;\r\n  offset: Point;\r\n  radius: number;\r\n  cropperSettings: CropperSettings;\r\n  setDrag(value: boolean): void;\r\n  draw(ctx: CanvasRenderingContext2D): void;\r\n  setOver(over: boolean): void;\r\n  touchInBounds(x: number, y: number): boolean;\r\n}\r\n\r\nexport class Handle implements IHandle {\r\n  public over: boolean;\r\n  public drag: boolean;\r\n  private _position: Point;\r\n  public offset: Point;\r\n  public radius: number;\r\n\r\n  public cropperSettings: CropperSettings = new CropperSettings();\r\n\r\n  constructor(x: number, y: number, radius: number, settings: CropperSettings) {\r\n    this.over = false;\r\n    this.drag = false;\r\n    this._position = new Point(x, y);\r\n    this.offset = new Point(0, 0);\r\n    this.radius = radius;\r\n    this.cropperSettings = settings;\r\n  }\r\n\r\n  public setDrag(value: boolean): void {\r\n    this.drag = value;\r\n    this.setOver(value);\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D) {\r\n    // this should't be empty\r\n  }\r\n\r\n  public setOver(over: boolean): void {\r\n    this.over = over;\r\n  }\r\n\r\n  public touchInBounds(x: number, y: number): boolean {\r\n    return (\r\n      x > this.position.x - this.radius + this.offset.x &&\r\n      x < this.position.x + this.radius + this.offset.x &&\r\n      y > this.position.y - this.radius + this.offset.y &&\r\n      y < this.position.y + this.radius + this.offset.y\r\n    );\r\n  }\r\n\r\n  public get position(): Point {\r\n    return this._position;\r\n  }\r\n\r\n  public setPosition(x: number, y: number) {\r\n    this._position.x = x;\r\n    this._position.y = y;\r\n  }\r\n}\r\n"]}