{"version":3,"file":"ngx-mat-select-search.js.map","sources":["ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts"],"sourcesContent":["import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, QueryList,\n  ViewChild,\n  ContentChild, Optional, HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatOption, MatSelect } from '@angular/material';\nimport {\n  A,\n  Z,\n  ZERO,\n  NINE,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport { Subject } from 'rxjs';\nimport {delay, take, takeUntil} from 'rxjs/operators';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: ['./mat-select-search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Whether to show the search-in-progress indicator */\n  @Input() searching = false;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', {read: ElementRef}) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', {read: ElementRef}) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective) clearIcon: MatSelectSearchClearDirective;\n\n  @HostBinding('class.mat-select-search-inside-mat-option')\n  get isInsideMatOption(): boolean {\n    return !!this.matOption;\n  }\n\n  /** Current search value */\n  get value(): string {\n    return this._value;\n  }\n  private _value: string;\n\n  onChange: Function = (_: any) => {};\n  onTouched: Function = (_: any) => {};\n\n  /** Reference to the MatSelect options */\n  public _options: QueryList<MatOption>;\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  /** Whether the backdrop class has been set */\n  private overlayClassSet = false;\n\n  /** Event that emits when the current value changes */\n  private change = new EventEmitter<string>();\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n              public changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MatOption) public matOption: MatOption = null) {\n\n\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        this.matSelect.panelClass.push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          // focus the search field when opening\n          this.getWidth();\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this._options = this.matSelect.options;\n        this._options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            const keyManager = this.matSelect._keyManager;\n            if (keyManager && this.matSelect.panelOpen) {\n\n              // avoid \"expression has been changed\" error\n              setTimeout(() => {\n                // set first item active and input width\n                keyManager.setFirstItemActive();\n                this.getWidth();\n\n                // set no entries found class on mat option\n                if (this.matOption) {\n                  if (this._noEntriesFound()) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                  } else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                  }\n                }\n              }, 1);\n\n            }\n          });\n      });\n\n    // detect changes when the input changes\n    this.change\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.changeDetectorRef.detectChanges();\n      });\n\n    this.initMultipleHandling();\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  ngAfterViewInit() {\n    this.setOverlayClass();\n\n    // update view when available options change\n    this.matSelect.openedChange\n      .pipe(\n        take(1),\n        takeUntil(this._onDestroy)\n      ).subscribe(() => {\n        this.matSelect.options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            this.changeDetectorRef.markForCheck();\n          });\n      });\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n  // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n  if ((event.key && event.key.length === 1) ||\n    (event.keyCode >= A && event.keyCode <= Z) ||\n    (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n    (event.keyCode === SPACE)) {\n      event.stopPropagation();\n    }\n  }\n\n\n  writeValue(value: string) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this._value = value;\n      this.change.emit(value);\n    }\n  }\n\n  onInputChange(value) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this.initMultiSelectedValues();\n      this._value = value;\n      this.onChange(value);\n      this.change.emit(value);\n    }\n  }\n\n  onBlur(value: string) {\n    this.writeValue(value);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: Function) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    this.searchSelectInput.nativeElement.value = '';\n    this.onInputChange('');\n    if (this.matOption && !focus) {\n      // remove no entries found class on mat option\n      this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n    }\n    if (focus) {\n      this._focus();\n    }\n  }\n\n  /**\n   * Sets the overlay class  to correct offsetY\n   * so that the selected option is at the position of the select box when opening\n   */\n  private setOverlayClass() {\n    if (this.overlayClassSet) {\n      return;\n    }\n    const overlayClasses: string[] = ['cdk-overlay-pane-select-search'];\n\n    if (!this.matOption) {\n      // add offset to panel if component is not placed inside mat-option\n      overlayClasses.push('cdk-overlay-pane-select-search-with-offset');\n    }\n\n    this.matSelect.overlayDir.attach\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        // note: this is hacky, but currently there is no better way to do this\n        let element: HTMLElement = this.searchSelectInput.nativeElement;\n        let overlayElement: HTMLElement;\n        while (element = element.parentElement) {\n          if (element.classList.contains('cdk-overlay-pane')) {\n            overlayElement = element;\n            break;\n          }\n        }\n        if (overlayElement) {\n          overlayClasses.forEach(overlayClass => {\n            overlayElement.classList.add(overlayClass);\n          });\n        }\n      });\n\n    this.overlayClassSet = true;\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.matSelect.valueChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        if (this.matSelect.multiple) {\n          let restoreSelectedValues = false;\n          if (this._value && this._value.length\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n\n          if (restoreSelectedValues) {\n            this.matSelect._onChange(values);\n          }\n\n          this.previousSelectedValues = values;\n        }\n      });\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  private getWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  /**\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\n   */\n  initMultiSelectedValues() {\n    if (this.matSelect.multiple && !this._value) {\n      this.previousSelectedValues = this.matSelect.options\n        .filter(option => option.selected)\n        .map(option => option.value);\n    }\n  }\n\n  /**\n   * Returns whether the \"no entries found\" message should be displayed\n   */\n  public _noEntriesFound(): boolean {\n    if (!this._options) {\n      return;\n    }\n    if (this.matOption) {\n      return this.noEntriesFoundLabel && this.value && this._options.length === 1;\n    } else {\n      return this.noEntriesFoundLabel && this.value && this._options.length === 0;\n    }\n  }\n\n}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport {MatButtonModule, MatInputModule, MatIconModule, MatProgressSpinnerModule} from '@angular/material';\nimport { CommonModule } from '@angular/common';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\nexport const MatSelectSearchVersion = '1.6.0';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n"],"names":[],"mappings":"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"}
