{"version":3,"sources":["ng://ngx-quill/src/quill-editor.component.ts","ng://ngx-quill/src/quill.module.ts"],"names":["Quill","undefined","QuillEditorComponent","elementRef","doc","platformId","renderer","zone","_this","this","emptyArray","defaultModules","toolbar","header","list","script","indent","direction","size","color","slice","background","font","align","format","style","strict","customOptions","onEditorCreated","EventEmitter","onContentChanged","onSelectionChanged","valueGetter","quillEditor","editorElement","html","children","innerHTML","modelValue","getText","getContents","JSON","stringify","e","valueSetter","value","clipboard","convert","parse","onModelChange","onModelTouched","prototype","ngAfterViewInit","isPlatformServer","require","toolbarElem","nativeElement","querySelector","modules","placeholder","trim","insertAdjacentHTML","editorElem","Object","keys","forEach","key","setStyle","customOption","newCustomOption","import","whitelist","register","readOnly","theme","formats","bounds","body","scrollingContainer","content","setContents","setText","contents","history","clear","emit","selectionChangeEvent","on","range","oldRange","source","run","editor","textChangeEvent","delta","oldDelta","text","ngOnDestroy","removeListener","ngOnChanges","changes","enable","currentValue","root","dataset","writeValue","registerOnChange","fn","registerOnTouched","validate","err","valid","textLength","length","minLength","minLengthError","given","maxLength","maxLengthError","required","requiredError","empty","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","encapsulation","ViewEncapsulation","None","ElementRef","Inject","DOCUMENT","decorators","type","PLATFORM_ID","Renderer2","NgZone","Input","Output","QuillModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { isPlatformServer } from '@angular/common';\n\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  ControlValueAccessor,\n  Validator\n} from '@angular/forms';\n\nimport { DOCUMENT } from '@angular/common';\n\n// import * as QuillNamespace from 'quill';\n// Because quill uses `document` directly, we cannot `import` during SSR\n// instead, we load dynamically via `require('quill')` in `ngAfterViewInit()`\ndeclare var require: any;\nvar Quill: any = undefined;\n\nexport interface CustomOption {\n  import: string;\n  whitelist: Array<any>;\n}\n\n@Component({\n  selector: 'quill-editor',\n  template: `\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n`,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => QuillEditorComponent),\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => QuillEditorComponent),\n      multi: true\n    }\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class QuillEditorComponent\n  implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {\n  quillEditor: any;\n  editorElem: HTMLElement;\n  emptyArray: any[] = [];\n  content: any;\n  selectionChangeEvent: any;\n  textChangeEvent: any;\n  defaultModules = {\n    toolbar: [\n      ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n      ['blockquote', 'code-block'],\n\n      [{ header: 1 }, { header: 2 }], // custom button values\n      [{ list: 'ordered' }, { list: 'bullet' }],\n      [{ script: 'sub' }, { script: 'super' }], // superscript/subscript\n      [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n      [{ direction: 'rtl' }], // text direction\n\n      [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n      [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n      [\n        { color: this.emptyArray.slice() },\n        { background: this.emptyArray.slice() }\n      ], // dropdown with defaults from theme\n      [{ font: this.emptyArray.slice() }],\n      [{ align: this.emptyArray.slice() }],\n\n      ['clean'], // remove formatting button\n\n      ['link', 'image', 'video'] // link and image, video\n    ]\n  };\n\n  @Input() format: 'object' | 'html' | 'text' | 'json' = 'html';\n  @Input() theme: string;\n  @Input() modules: { [index: string]: Object };\n  @Input() readOnly: boolean;\n  @Input() placeholder: string;\n  @Input() maxLength: number;\n  @Input() minLength: number;\n  @Input() required: boolean;\n  @Input() formats: string[];\n  @Input() style: any = {};\n  @Input() strict: boolean = true;\n  @Input() scrollingContainer: HTMLElement | string;\n  @Input() bounds: HTMLElement | string;\n  @Input() customOptions: CustomOption[] = [];\n\n  @Output() onEditorCreated: EventEmitter<any> = new EventEmitter();\n  @Output() onContentChanged: EventEmitter<any> = new EventEmitter();\n  @Output() onSelectionChanged: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  valueGetter = (quillEditor: any, editorElement: HTMLElement): any => {\n    let html: string | null = editorElement.children[0].innerHTML;\n    if (html === '<p><br></p>' || html === '<div><br><div>') {\n      html = null;\n    }\n    let modelValue = html;\n\n    if (this.format === 'text') {\n      modelValue = quillEditor.getText();\n    } else if (this.format === 'object') {\n      modelValue = quillEditor.getContents();\n    } else if (this.format === 'json') {\n      try {\n        modelValue = JSON.stringify(quillEditor.getContents());\n      } catch (e) {\n        modelValue = quillEditor.getText();\n      }\n    }\n\n    return modelValue;\n  }\n\n  @Input()\n  valueSetter = (quillEditor: any, value: any, format: 'object' | 'html' | 'json'): any => {\n    if (this.format === 'html') {\n      return quillEditor.clipboard.convert(value);\n    } else if (this.format === 'json') {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n\n    return value;\n  }\n\n  onModelChange: Function = () => {};\n  onModelTouched: Function = () => {};\n\n  constructor(\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) private doc: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private renderer: Renderer2,\n    private zone: NgZone\n  ) {}\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    if (!Quill) {\n      Quill = require('quill');\n    }\n\n    const toolbarElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-toolbar]'\n    );\n    let modules: any = this.modules || this.defaultModules;\n    let placeholder = 'Insert text here ...';\n\n    if (this.placeholder !== null && this.placeholder !== undefined) {\n      placeholder = this.placeholder.trim();\n    }\n\n    if (toolbarElem) {\n      modules['toolbar'] = toolbarElem;\n    }\n    this.elementRef.nativeElement.insertAdjacentHTML(\n      'beforeend',\n      '<div quill-editor-element></div>'\n    );\n    this.editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-element]'\n    );\n\n    if (this.style) {\n      Object.keys(this.style).forEach((key: string) => {\n        this.renderer.setStyle(this.editorElem, key, this.style[key]);\n      });\n    }\n\n    this.customOptions.forEach(customOption => {\n      const newCustomOption = Quill.import(customOption.import);\n      newCustomOption.whitelist = customOption.whitelist;\n      Quill.register(newCustomOption, true);\n    });\n\n    this.quillEditor = new Quill(this.editorElem, {\n      modules: modules,\n      placeholder: placeholder,\n      readOnly: this.readOnly || false,\n      theme: this.theme || 'snow',\n      formats: this.formats,\n      bounds: this.bounds ? (this.bounds === 'self' ? this.editorElem : this.bounds) : this.doc.body,\n      strict: this.strict,\n      scrollingContainer: this.scrollingContainer\n    });\n\n    if (this.content) {\n      if (this.format === 'object') {\n        this.quillEditor.setContents(this.content, 'silent');\n      } else if (this.format === 'text') {\n        this.quillEditor.setText(this.content, 'silent');\n      } else if (this.format === 'json') {\n        try {\n          this.quillEditor.setContents(JSON.parse(this.content), 'silent');\n        } catch (e) {\n          this.quillEditor.setText(this.content, 'silent');\n        }\n      } else {\n        const contents = this.quillEditor.clipboard.convert(this.content);\n        this.quillEditor.setContents(contents, 'silent');\n      }\n\n      this.quillEditor.history.clear();\n    }\n\n    this.onEditorCreated.emit(this.quillEditor);\n\n    // mark model as touched if editor lost focus\n    this.selectionChangeEvent = this.quillEditor.on(\n      'selection-change',\n      (range: any, oldRange: any, source: string) => {\n        this.zone.run(() => {\n          this.onSelectionChanged.emit({\n            editor: this.quillEditor,\n            range: range,\n            oldRange: oldRange,\n            source: source\n          });\n\n          if (!range) {\n            this.onModelTouched();\n          }\n        });\n      }\n    );\n\n    // update model if text changes\n    this.textChangeEvent = this.quillEditor.on(\n      'text-change',\n      (delta: any, oldDelta: any, source: string) => {\n\n        const text = this.quillEditor.getText();\n        const content = this.quillEditor.getContents();\n\n        let html: string | null = this.editorElem.children[0].innerHTML;\n        if (html === '<p><br></p>' || html === '<div><br><div>') {\n          html = null;\n        }\n\n        this.zone.run(() => {\n          this.onModelChange(\n            this.valueGetter(this.quillEditor, this.editorElem)\n          );\n\n          this.onContentChanged.emit({\n            editor: this.quillEditor,\n            html: html,\n            text: text,\n            content: content,\n            delta: delta,\n            oldDelta: oldDelta,\n            source: source\n          });\n        });\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.selectionChangeEvent) {\n      this.selectionChangeEvent.removeListener('selection-change');\n    }\n    if (this.textChangeEvent) {\n      this.textChangeEvent.removeListener('text-change');\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.quillEditor) {\n      return;\n    }\n    if (changes['readOnly']) {\n      this.quillEditor.enable(!changes['readOnly'].currentValue);\n    }\n    if (changes['placeholder']) {\n      this.quillEditor.root.dataset.placeholder =\n        changes['placeholder'].currentValue;\n    }\n  }\n\n  writeValue(currentValue: any) {\n    this.content = currentValue;\n\n    if (this.quillEditor) {\n      if (currentValue) {\n        if (this.format === 'text') {\n          this.quillEditor.setText(currentValue);\n        } else {\n          this.quillEditor.setContents(\n            this.valueSetter(this.quillEditor, this.content, this.format)\n          );\n        }\n        return;\n      }\n      this.quillEditor.setText('');\n    }\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: Function): void {\n    this.onModelTouched = fn;\n  }\n\n  validate() {\n    if (!this.quillEditor) {\n      return null;\n    }\n\n    let err: {\n        minLengthError?: { given: number; minLength: number };\n        maxLengthError?: { given: number; maxLength: number };\n        requiredError?: { empty: boolean };\n      } = {},\n      valid = true;\n\n    const textLength = this.quillEditor.getText().trim().length;\n\n    if (this.minLength && textLength && textLength < this.minLength) {\n      err.minLengthError = {\n        given: textLength,\n        minLength: this.minLength\n      };\n\n      valid = false;\n    }\n\n    if (this.maxLength && textLength > this.maxLength) {\n      err.maxLengthError = {\n        given: textLength,\n        maxLength: this.maxLength\n      };\n\n      valid = false;\n    }\n\n    if (this.required && !textLength) {\n      err.requiredError = {\n        empty: true\n      };\n\n      valid = false;\n    }\n\n    return valid ? null : err;\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { QuillEditorComponent } from './quill-editor.component';\n\n@NgModule({\n  declarations: [\n    QuillEditorComponent\n  ],\n  imports: [],\n  exports: [QuillEditorComponent],\n  providers: []\n})\nexport class QuillModule { }\n"]}