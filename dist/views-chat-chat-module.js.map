{"version":3,"sources":["webpack:///./src/app/views/chat/chat-contents/chat-contents.component.html","webpack:///./src/app/views/chat/chat-contents/chat-contents.component.scss","webpack:///./src/app/views/chat/chat-contents/chat-contents.component.ts","webpack:///./src/app/views/chat/chat-left-sidebar/chat-left-sidebar.component.html","webpack:///./src/app/views/chat/chat-left-sidebar/chat-left-sidebar.component.scss","webpack:///./src/app/views/chat/chat-left-sidebar/chat-left-sidebar.component.ts","webpack:///./src/app/views/chat/chat-routing.module.ts","webpack:///./src/app/views/chat/chat.module.ts","webpack:///./src/app/views/chat/chat.service.ts","webpack:///./src/app/views/chat/chat/chat.component.html","webpack:///./src/app/views/chat/chat/chat.component.scss","webpack:///./src/app/views/chat/chat/chat.component.ts"],"names":[],"mappings":"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","file":"views-chat-chat-module.js","sourcesContent":["module.exports = \"<div>\\n  <div class=\\\"d-flex pl-3 pr-3 pt-2 pb-2 o-hidden box-shadow-1 chat-topbar\\\">\\n      <a appSidebarToggler=\\\"chat-sidebar\\\" class=\\\"link-icon d-md-none\\\">\\n        <i class=\\\"icon-regular i-Right ml-0 mr-3\\\"></i> \\n      </a>\\n      <div class=\\\"d-flex align-items-center\\\" *ngIf=\\\"activeContact?.id\\\">\\n      <img [src]=\\\"activeContact?.avatar\\\" \\n      [alt]=\\\"activeContact?.name\\\" \\n      class=\\\"avatar-sm rounded-circle mr-2\\\">\\n      <p class=\\\"m-0 text-title text-16 flex-grow-1\\\">{{activeContact?.name}}</p>\\n    </div>\\n  </div>\\n\\n  <div [perfectScrollbar]=\\\"{suppressScrollX: true}\\\" class=\\\"chat-content rtl-ps-none\\\" *ngIf=\\\"!chatService.loadingCollection && chatCollection\\\">\\n    <div *ngFor=\\\"let chat of chatCollection?.chats\\\" class=\\\"mb-4\\\">\\n\\n      <div *ngIf=\\\"chat.contactId !== activeContact.id\\\" class=\\\"d-flex user\\\">\\n        <img [src]=\\\"user?.avatar\\\" [alt]=\\\"user?.name\\\" class=\\\"avatar-sm rounded-circle mr-3\\\">\\n        <div class=\\\"message flex-grow-1\\\">\\n          <div class=\\\"d-flex\\\">\\n            <p class=\\\"mb-1 text-title text-16 flex-grow-1\\\">{{user?.name}}</p>\\n            <span class=\\\"text-small text-muted\\\">{{chat.time | date}}</span>\\n          </div>\\n          <p class=\\\"m-0\\\">{{chat.text}}</p>\\n        </div>\\n      </div>\\n      <div *ngIf=\\\"chat.contactId === activeContact.id\\\" class=\\\"d-flex\\\">\\n        <div class=\\\"message flex-grow-1\\\">\\n            <div class=\\\"d-flex\\\">\\n              <p class=\\\"mb-1 text-title text-16 flex-grow-1\\\">{{activeContact?.name}}</p>\\n              <span class=\\\"text-small text-muted\\\">{{chat.time | date}}</span>\\n            </div>\\n          <p class=\\\"m-0\\\">{{chat.text}}</p>\\n        </div>\\n        <img [src]=\\\"activeContact?.avatar\\\" \\n        [alt]=\\\"activeContact?.name\\\" \\n        class=\\\"avatar-sm rounded-circle ml-3\\\">\\n      </div>\\n\\n    </div>\\n  </div>\\n\\n  <div class=\\\"pl-3 pr-3 pt-3 pb-3 box-shadow-1 chat-input-area\\\" \\n  *ngIf=\\\"chatCollection && !chatService.loadingCollection\\\">\\n    <form #msgForm=\\\"ngForm\\\" \\n    class=\\\"inputForm\\\" \\n    (ngSubmit)=\\\"sendMessage($event)\\\" \\n    (keyup.enter)=\\\"sendMessage($event)\\\">\\n      <div class=\\\"form-group\\\">\\n        <textarea class=\\\"form-control form-control-rounded\\\" #msgInput\\n        ngModel\\n        placeholder=\\\"Type your message\\\"\\n        name=\\\"message\\\" id=\\\"message\\\" cols=\\\"30\\\" rows=\\\"3\\\"></textarea>\\n      </div>\\n      <div class=\\\"d-flex\\\">\\n        <div class=\\\"flex-grow-1\\\"></div>\\n        <button class=\\\"btn btn-icon btn-rounded btn-primary mr-2\\\">\\n          <i class=\\\"i-Paper-Plane\\\"></i>\\n        </button>\\n        <button class=\\\"btn btn-icon btn-rounded btn-outline-primary\\\" type=\\\"button\\\">\\n          <i class=\\\"i-Add-File\\\"></i>\\n        </button>\\n      </div>\\n    </form>\\n  </div>\\n\\n  <div class=\\\"spinner-glow spinner-glow-warning\\\" \\n  *ngIf=\\\"chatService.loadingCollection\\\"></div>\\n\\n  <div class=\\\"app-inro-circle\\\" *ngIf=\\\"!chatCollection && !chatService.loadingCollection\\\">\\n    <div class=\\\"border rounded-circle big-bubble\\\"  [@animate]=\\\"{value:'*',params:{scale:'.2',delay:'400ms', duration: '400ms'}}\\\">\\n      <i class=\\\"i-Speach-Bubbles\\\"></i>\\n    </div>\\n    <p class=\\\"text-16\\\" [@animate]=\\\"{value:'*',params:{y:'120px',delay:'600ms', duration: '400ms'}}\\\">Select a contact and start chat.</p>\\n  </div>\\n\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild, ViewChildren, Input, OnDestroy } from '@angular/core';\nimport { PerfectScrollbarDirective } from 'ngx-perfect-scrollbar';\nimport { ChatService, ChatCollection, User, Chat } from '../chat.service';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { SharedAnimations } from 'src/app/shared/animations/shared-animations';\n\n@Component({\n  selector: 'app-chat-contents',\n  templateUrl: './chat-contents.component.html',\n  styleUrls: ['./chat-contents.component.scss'],\n  animations: [SharedAnimations]\n})\nexport class ChatContentsComponent implements OnInit, OnDestroy {\n  user: User = new User();\n  activeContact: User = new User();\n  public chatCollection: ChatCollection;\n\n  userUpdateSub: Subscription;\n  chatUpdateSub: Subscription;\n  chatSelectSub: Subscription;\n\n  @Input('matSidenav') matSidenav;\n  @ViewChild(PerfectScrollbarDirective) psContainer: PerfectScrollbarDirective;\n\n  @ViewChildren('msgInput') msgInput;\n  @ViewChild('msgForm') msgForm: NgForm;\n\n  constructor(public chatService: ChatService) {}\n\n  ngOnInit() {\n    // Listen for user update\n    this.userUpdateSub = this.chatService.onUserUpdated.subscribe(user => {\n      console.log(user);\n      this.user = user;\n    });\n\n    // Listen for contact change\n    this.chatSelectSub = this.chatService.onChatSelected.subscribe(res => {\n      if (res) {\n        this.chatCollection = res.chatCollection;\n        this.activeContact = res.contact;\n        this.initMsgForm();\n      }\n    });\n\n    // Listen for chat update\n    this.chatUpdateSub = this.chatService.onChatsUpdated.subscribe(chat => {\n      this.chatCollection.chats.push(chat);\n      this.scrollToBottom();\n    });\n  }\n\n  ngOnDestroy() {\n    if ( this.userUpdateSub ) { this.userUpdateSub.unsubscribe(); }\n    if ( this.chatSelectSub ) { this.chatSelectSub.unsubscribe(); }\n    if ( this.chatUpdateSub ) { this.chatUpdateSub.unsubscribe(); }\n  }\n\n  sendMessage(e) {\n    const chat: Chat = {\n      contactId: this.chatService.user.id,\n      text: this.msgForm.form.value.message,\n      time: new Date().toISOString()\n    };\n\n    this.chatCollection.chats.push(chat);\n    this.chatService\n      .updateChats(this.chatCollection.id, [...this.chatCollection.chats])\n      .subscribe(res => {\n        this.initMsgForm();\n      });\n\n    // Only for demo purpose\n    this.chatService.autoReply({\n      contactId: this.activeContact.id,\n      text: `Hi, I\\'m ${this.activeContact.name}. Your imaginary friend.`,\n      time: new Date().toISOString()\n    });\n\n  }\n\n  initMsgForm() {\n    setTimeout(() => {\n      this.msgForm.reset();\n      this.msgInput.first.nativeElement.focus();\n      this.scrollToBottom();\n    });\n  }\n\n  scrollToBottom() {\n    setTimeout(() => {\n      this.psContainer.update();\n      this.psContainer.scrollToBottom(0, 400);\n    });\n  }\n}\n","module.exports = \"<div class=\\\"border-right\\\">\\n  <div class=\\\"pt-2 pb-2 pl-3 pr-3 d-flex align-items-center o-hidden box-shadow-1 chat-topbar\\\">\\n    <a appSidebarToggler=\\\"chat-sidebar\\\" class=\\\"link-icon d-md-none\\\">\\n      <i class=\\\"icon-regular ml-0 mr-3 i-Left\\\"></i> \\n    </a>\\n    <div class=\\\"form-group m-0 flex-grow-1\\\">\\n      <input type=\\\"text\\\" class=\\\"form-control form-control-rounded\\\" id=\\\"search\\\" placeholder=\\\"Search contacts\\\">\\n    </div>\\n    \\n  </div>\\n  \\n  <div [perfectScrollbar]=\\\"{suppressScrollX: true}\\\" class=\\\"contacts-scrollable rtl-ps-none\\\">\\n    <div class=\\\"mt-4 pb-2 pl-3 pr-3 font-weight-bold text-muted border-bottom\\\">Recent</div>\\n    <div *ngFor=\\\"let info of currentUser?.chatInfo; let i = index\\\" \\n    class=\\\"p-3 d-flex align-items-center contact\\\"\\n    [ngClass]=\\\"{\\n      'border-bottom': i != currentUser?.chatInfo.length - 1, \\n      'online': (contacts | getValueByKey:info.contactId:'status') === 'online'\\n    }\\\"\\n    (click)=\\\"getChatByContact(info.contactId)\\\">\\n        <img [src]=\\\"contacts | getValueByKey:info.contactId:'avatar'\\\" \\n        class=\\\"avatar-sm rounded-circle mr-3\\\" alt=\\\"\\\">\\n        <div>\\n            <h6 class=\\\"m-0\\\">{{info.contactName}}</h6>\\n            <span class=\\\"text-muted text-small\\\">{{info.lastChatTime  | date}}</span>\\n        </div>\\n    </div>\\n    <div class=\\\"mt-3 pb-2 pl-3 pr-3 font-weight-bold text-muted border-bottom\\\">Contacts</div>\\n    <div *ngFor=\\\"let contact of contacts\\\" \\n    class=\\\"p-3 d-flex border-bottom align-items-center contact\\\"\\n    [ngClass]=\\\"{online: contact.status === 'online'}\\\"\\n    (click)=\\\"getChatByContact(contact.id)\\\">\\n      <img [src]=\\\"contact.avatar\\\" alt=\\\"\\\" class=\\\"avatar-sm rounded-circle mr-3\\\">\\n      <h6 class=\\\"\\\">{{contact.name}}</h6>\\n    </div>\\n  </div>\\n  \\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { User, ChatService } from '../chat.service';\n\n@Component({\n  selector: 'app-chat-left-sidebar',\n  templateUrl: './chat-left-sidebar.component.html',\n  styleUrls: ['./chat-left-sidebar.component.scss']\n})\nexport class ChatLeftSidebarComponent implements OnInit {\n\n  userUpdateSub: Subscription;\n  loadDataSub: Subscription;\n\n  isSidenavOpen = true;\n\n  currentUser: User = new User();\n  contacts: any[];\n\n  constructor(private chatService: ChatService) {}\n\n  ngOnInit() {\n    // this.chatService.onChatsUpdated\n    //   .subscribe(updatedChats => {\n    //     this.chats = updatedChats;\n    //   });\n\n    this.userUpdateSub = this.chatService.onUserUpdated\n      .subscribe(updatedUser => {\n        this.currentUser = updatedUser;\n      });\n\n    this.loadDataSub = this.chatService.loadChatData()\n      .subscribe(res => {\n        this.currentUser = this.chatService.user;\n        // this.chats = this.chatService.chats;\n        this.contacts = this.chatService.contacts;\n      });\n  }\n  ngOnDestroy() {\n    if ( this.userUpdateSub ) { this.userUpdateSub.unsubscribe(); }\n    if ( this.loadDataSub ) { this.loadDataSub.unsubscribe(); }\n  }\n\n  getChatByContact(contactId) {\n    this.chatService.getChatByContact(contactId)\n      .subscribe(res => {\n        console.log('from sub', res);\n      }, err => {\n        console.log(err);\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ChatComponent } from './chat/chat.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ChatRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChatRoutingModule } from './chat-routing.module';\nimport { ChatComponent } from './chat/chat.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { ChatLeftSidebarComponent } from './chat-left-sidebar/chat-left-sidebar.component';\nimport { ChatContentsComponent } from './chat-contents/chat-contents.component';\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\nimport { FormsModule } from '@angular/forms';\nimport { SharedDirectivesModule } from 'src/app/shared/directives/shared-directives.module';\nimport { SharedPipesModule } from 'src/app/shared/pipes/shared-pipes.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    SharedDirectivesModule,\n    SharedPipesModule,\n    FormsModule,\n    PerfectScrollbarModule,\n    ChatRoutingModule\n  ],\n  declarations: [ChatComponent, ChatLeftSidebarComponent, ChatContentsComponent]\n})\nexport class ChatModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject, Subject, of, combineLatest } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nexport interface Chat {\n  text: string;\n  time: Date | string;\n  contactId: User['id'];\n}\n\nexport interface ChatCollection {\n  id: string;\n  chats: Chat[];\n}\n\nexport interface UserChatInfo {\n  chatId: ChatCollection['id'];\n  contactId: User['id'];\n  contactName: User['name'];\n  unread: number;\n  lastChatTime: Date | string;\n}\n\nexport class User {\n  id: string;\n  avatar: string;\n  name: string;\n  status: string;\n  chatInfo?: UserChatInfo[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  public contacts: User[];\n  public chats: ChatCollection[];\n  public user: User;\n\n  onContactSelected = new BehaviorSubject<any>(null);\n  onUserUpdated = new Subject<User>();\n\n  onChatSelected = new BehaviorSubject<any>(null);\n  onChatsUpdated = new Subject<any>();\n  loadingCollection: boolean;\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  loadChatData(): Observable<any> {\n    return combineLatest(\n      this.getAllContacts(),\n      this.getAllChats(),\n      this.getCurrentUser(),\n      (contacts, chats, user) => {\n        this.contacts = contacts;\n        this.chats = chats;\n        this.user = user;\n        // console.log('next.willCall')\n        this.onUserUpdated.next(user);\n        // console.log('next.called')\n        // console.log(\n        //   \"contacts:\",\n        //   contacts,\n        //   \"\\n chats:\",\n        //   chats,\n        //   \"\\n currUser:\",\n        //   user\n        // );\n      }\n    );\n  }\n  public getChatByContact(contactId): Observable<ChatCollection> {\n    this.loadingCollection = true;\n    const chatInfo = this.user.chatInfo.find(chat => chat.contactId === contactId);\n\n    if (!chatInfo) {\n      return this.createChatCollection(contactId)\n        .pipe(switchMap(chatColl => {\n          return this.getChatByContact(contactId);\n        }));\n    }\n\n    return this.getAllChats()\n      .pipe(switchMap(chats => {\n        const chatCollection = chats.find(chat => chat.id === chatInfo.chatId);\n        const contact = this.contacts.find(\n          contact => contact.id === contactId\n        );\n\n        this.onChatSelected.next({\n          chatCollection: chatCollection,\n          contact: contact\n        });\n        this.loadingCollection = false;\n        return of(chatCollection);\n      }));\n  }\n\n  createChatCollection(contactId) {\n\n    const contact = this.contacts.find(contact => contact.id === contactId);\n    const chatId = (Math.random() * 1000000000).toString();\n\n    const chatCollection: ChatCollection = {\n      id: chatId,\n      chats: []\n    };\n\n    const chatInfo = {\n      chatId: chatId,\n      lastChatTime: new Date(),\n      contactId: contact.id,\n      contactName: contact.name,\n      unread: null\n    };\n\n    return this.http\n      .post('api/chat-collections', {...chatCollection})\n      .pipe(switchMap(updatedChatCollection => {\n\n        this.user.chatInfo.push(chatInfo);\n        return this.updateUser(this.user)\n          .pipe(switchMap((res) => {\n\n            return this.getCurrentUser()\n              .pipe(map(user => {\n                this.user = user;\n                // console.log(user)\n                this.onUserUpdated.next(user);\n              }));\n\n            // return updatedChatCollection\n          }));\n\n      }));\n  }\n\n  getAllContacts(): Observable<User[]> {\n    return this.http.get<User[]>('api/contacts');\n  }\n  getAllChats(): Observable<ChatCollection[]> {\n    return this.http.get<ChatCollection[]>('api/chat-collections');\n  }\n  getCurrentUser(): Observable<User> {\n    return this.http.get<User>('api/chat-user')\n      .pipe(map(res => res[0]));\n  }\n  updateUser(user: User): Observable<User> {\n    return this.http.put<User>(`api/chat-user/${user.id}`, {...user});\n  }\n  updateChats(chatId: string, chats: Chat[]): Observable<ChatCollection> {\n    const chatCollection: ChatCollection = {\n      id: chatId,\n      chats: chats\n    };\n    return this.http.put<ChatCollection>('api/chat-collections', chatCollection);\n  }\n\n  autoReply(chat) {\n    setTimeout(() => {\n      this.onChatsUpdated.next(chat);\n    }, 1500);\n  }\n\n}\n\n","module.exports = \"<div appSidebarContainer class=\\\"card chat-sidebar-container\\\">\\n  <div appSidebarContent class=\\\"chat-content-wrap\\\">\\n    <app-chat-contents></app-chat-contents>\\n  </div>\\n  <div appSidebar=\\\"chat-sidebar\\\" class=\\\"chat-sidebar-wrap\\\">\\n    <app-chat-left-sidebar></app-chat-left-sidebar>\\n  </div>\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})\nexport class ChatComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n"],"sourceRoot":""}